class Solution {
    	public int largestRectangleArea(int[] heights) {		
		if (heights.length == 0)
			return 0;
		if (heights.length == 1)
			return heights[0];
		if (heights.length == 2)
			return Math.max(Math.max(heights[0], heights[1]), 2 * Math.min(heights[0], heights[1]));
		
		int H = heights.length;
		int[] dpmax = new int[H];	
		Arrays.fill(dpmax, Integer.MIN_VALUE);		
	
		int[] lpopPosarr = updateMins(heights, H, 1);
		int[] rpopPosarr = updateMins(heights, H, -1);
		
		for(int i = 0; i < H; i++) {			
			int lpoptime = lpopPosarr[i];
			int rpoptime = rpopPosarr[i];
			int ldiff = (lpoptime - i);
			int rdiff = (i - 1 - rpoptime);
			int area = (ldiff + rdiff) * heights[i];
			dpmax[i] = area;
		}
		
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < dpmax.length; i++) {
			max = Math.max(max, dpmax[i]);
		}
		return max;
	}

	int[] updateMins(int[] heights, int H, int dir) {
		Deque<Integer> minStack = new ArrayDeque<>();
		int[] popPosarr = new int[H];
		int si = (dir == 1) ? 0 : H - 1;
		minStack.push(si);		

		int popPos = -1;
		for (int i = si + dir; i < heights.length && i >= 0; i = i + dir) {
			int j = -1;

			if (!minStack.isEmpty() && heights[i] < heights[minStack.peek()]) {
				popPos = i;
				while (!minStack.isEmpty() && (heights[i] < heights[minStack.peek()])) {
					j = minStack.pop();
					popPosarr[j] = popPos;
				}
			}			
			minStack.push(i);
        }
		popPos = (dir == 1) ? H : -1;
		while (!minStack.isEmpty()) {
			popPosarr[minStack.pop()] = popPos;
		}
		return popPosarr;
	}
	
	public static void main(String[] args) {
		int[] heights = null;
		LargestRectHistogram lrh = null;
		int expected = -1;
		int actual = -1;

		heights = new int[] { 2, 1, 5, 6, 2, 3 };
		lrh = new LargestRectHistogram();
		expected = 10;
		actual = lrh.largestRectangleArea(heights);
		Assert.assertEquals(expected, actual);
		System.out.println("actual " + actual);
		System.out.println(
				"####################################################################################################");

		heights = new int[] { 0, 0, 0 };
		lrh = new LargestRectHistogram();
		expected = 0;
		actual = lrh.largestRectangleArea(heights);
		Assert.assertEquals(expected, actual);
		System.out.println("actual " + actual);
		System.out.println(
				"####################################################################################################");

		heights = new int[] { 2, 1, 2 };
		lrh = new LargestRectHistogram();
		expected = 3;
		actual = lrh.largestRectangleArea(heights);
		Assert.assertEquals(expected, actual);
		System.out.println("actual " + actual);
		System.out.println(
				"####################################################################################################");

		heights = new int[] { 5, 4, 1, 2 };
		lrh = new LargestRectHistogram();
		expected = 8;
		actual = lrh.largestRectangleArea(heights);
		Assert.assertEquals(expected, actual);
		System.out.println("actual " + actual);
		System.out.println(
				"####################################################################################################");

		heights = new int[] { 4, 2, 0, 3, 2, 4, 3, 4 };
		lrh = new LargestRectHistogram();
		expected = 10;
		actual = lrh.largestRectangleArea(heights);
		Assert.assertEquals(expected, actual);
		System.out.println("actual " + actual);
		System.out.println(
				"####################################################################################################");

		heights = new int[] { 3, 6, 5, 7, 4, 8, 1, 0 };
		lrh = new LargestRectHistogram();
		expected = 20;
		actual = lrh.largestRectangleArea(heights);
		Assert.assertEquals(expected, actual);
		System.out.println("actual " + actual);
		System.out.println(
				"####################################################################################################");
		
		heights = new int[] {0,1,0,2,1,0,1,3,2,1,2,1};
		lrh = new LargestRectHistogram();
		expected = 6;
		actual = lrh.largestRectangleArea(heights);
		Assert.assertEquals(expected, actual);
		System.out.println("actual " + actual);
		System.out.println(
				"####################################################################################################");
	}
}
