class Solution {
public int longestValidParentheses(String s) {
		System.out.println("s: " + s);
		int N = s.length();
		if (N == 0 || N == 1)
			return 0;

		int si = 0;
		while (si < N && s.charAt(si) == ')')
			si++;
		int ei = N - 1;
		while (ei >= 0 && s.charAt(ei) == '(')
			ei--;

		s = s.substring(si, ei + 1);
		N = s.length();
		si = 0;
		ei = N - 1;
		int[] ldiff = new int[N];
		int[] rdiff = new int[N];
		int lop = 0;
		int lcp = 0;
		int rop = 0;
		int rcp = 0;

		while (si < N && ei >= 0) {
			if (s.charAt(si) == '(')
				lop++;
			else if (s.charAt(si) == ')')
				lcp++;
			ldiff[si] = lop - lcp;
			if (ldiff[si] < 0 || rdiff[si] < 0) {
				lop = 0;
				lcp = 0;
			}

			if (s.charAt(ei) == '(')
				rop++;
			else if (s.charAt(ei) == ')')
				rcp++;
			rdiff[ei] = rcp - rop;
			if (rdiff[ei] < 0 || ldiff[ei] < 0) {
				rop = 0;
				rcp = 0;
			}
			si++; ei--;
		}	
		si = -1;
		ei = -1;
		int maxlen = Integer.MIN_VALUE;
		for (int i = 0; i < N; i++) {
			if (ldiff[i] < 0 || rdiff[i] < 0 || i==N-1) {
				if(i== N-1 && ldiff[i] >= 0 && rdiff[i] >= 0) ei++;
				if (ei >= si + 1) {
					int len = ei - si + 1;
					maxlen = Math.max(maxlen, len);				
				}
				si = -1;
				ei = -1;
			} else {
				if (si == -1) {
					si = i;
					ei = i;
				} else {
					ei++;
				}
			}
		}
		
		return (maxlen == Integer.MIN_VALUE) ? 0 : maxlen;
	}
}
