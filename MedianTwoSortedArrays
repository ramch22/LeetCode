public class MedianTwoSortedArraysV1 {
	public double findMedianSortedArrays(int[] nums1, int[] nums2) {
		if(nums1.length == 0 || nums2.length == 0) {
			if(nums1.length == 0) {
				int[] nums = nums1;
				nums1 = nums2;
				nums2 = nums;
			}
			int mid=(nums1.length-1)/2;
			return (nums1.length%2==0) ? (nums1[mid]+nums1[mid+1])/2d : nums1[mid];
		}		
        int len = nums1.length + nums2.length;
        int lmdn = (len%2==0) ? (len/2) : (len/2)+1;//NOT INDEX BUT MEDIAN ELEMENT CARDINALITY; 1 indexed.
        int[] mdns = findMedian(nums1, nums2, 0, nums1.length-1, 0, nums2.length-1, lmdn, len);
        double median = (mdns[0] + mdns[1])/2d;
        System.out.println(String.format("WHY NO PRINT: nums1: %s; nums2: %s; len: %s; lmdn: %s; mdns: %s; median: %s",
        		Arrays.toString(nums1), Arrays.toString(nums2), len, lmdn, Arrays.toString(mdns), median));
        return median;      		
    }
	
	int[] findMedian(int[] nums1, int[] nums2, int lo1, int hi1, int lo2, int hi2, int lmdn, int len) {
		if(!valid(nums1, nums2, lo1, hi1, lo2, hi2)) return new int[] {-1, -1};
		
		int m1 = lo1 + (hi1-lo1)/2;
		int m2 = lo2 + (hi2-lo2)/2;		
		if(nums2[m2] > nums1[m1]) {
			int[] nums = nums1;
			nums1 = nums2;
			nums2 = nums;
			int l = lo1;
			lo1 = lo2;
			lo2 = l;
			int h = hi1;
			hi1 = hi2;
			hi2 = h;
			int m = m1;
			m1 = m2;
			m2 = m;
		}
		System.out.println(String.format("nums1: %s; nums2: %s; lo1: %s; hi1: %s; lo2: %s; hi2: %s; lmdn: %s; len: %s; m1: %s; m2: %s", 
										Arrays.toString(nums1), Arrays.toString(nums2), lo1, hi1, lo2, hi2, lmdn, len, m1, m2));
		int m1posIn2 = (m2+1<nums2.length) ? doBS(nums2, m2+1, hi2, nums1[m1]) : m2;
		if(m1posIn2 == m2) m1posIn2 = m2+1;
		
		int less2m1 = (m1posIn2-lo2) + (m1-lo1);
		int inclm1 = less2m1+1;
		System.out.println(String.format("m1posIn2: %s; less2m1: %s; inclm1: %s; lmdn: %s", m1posIn2, less2m1, inclm1, lmdn));
		int lmdnVal = -1;
		int umdnVal = -1;
		if (lmdn > inclm1) {
			int nmdn = lmdn-inclm1;
			if(Math.abs(lmdn-inclm1)== 1) {
				return oneDiff(nums1, nums2, m1+1, m1posIn2+1, lmdn, inclm1, len);					
			}
			return findMedian(nums1, nums2, m1+1, hi1, m1posIn2+1, hi2, nmdn, len);
		}else if (lmdn < inclm1) {
			if(Math.abs(lmdn-inclm1)== 1) {
				return oneDiff(nums1, nums2, m1, m1posIn2-1, lmdn, inclm1, len);
			}
			return findMedian(nums1, nums2, lo1, m1, lo2, m1posIn2-1, lmdn, len);
		}else {
			lmdnVal = nums1[m1];
			umdnVal = lmdnVal;
			if (len%2==0) umdnVal = Math.min(nums1[m1+1], nums2[m1posIn2]);
			System.out.println(String.format("lmdnVal: %s; umdnVal: %s", lmdnVal, umdnVal));
			return new int[] {lmdnVal, umdnVal};			
		}		
	}
	
	int[] oneDiff(int[] nums1, int[] nums2, int mpos1, int mpos2, int lmdn, int inclm1, int len) {
		int lmdnVal = -1;
		int umdnVal = -1;
		System.out.println(String.format("nums1: %s; nums2: %s; mpos1: %s; mpos2: %s; len: %s", 
				Arrays.toString(nums1), Arrays.toString(nums2), mpos1, mpos2, len));
		if (nums1[mpos1] <= nums2[mpos2]) {
			lmdnVal = nums1[mpos1];
			umdnVal = lmdnVal;
			if(len%2==0) {
				umdnVal = ((nums1[mpos1] < nums2[mpos2]) && mpos1+1<nums1.length) ? Math.min(nums1[mpos1+1], nums2[mpos2]) : nums2[mpos2]; 
			}			
		} else if (nums1[mpos1] > nums2[mpos2]) {
			lmdnVal = nums2[mpos2];
			umdnVal = lmdnVal;
			if(len%2==0) {
				umdnVal = (mpos2+1<nums2.length) ? Math.min(nums2[mpos2+1], nums1[mpos1]) : nums1[mpos1];
			}
		}
		System.out.println(String.format("onediff:  lmdnVal: %s; umdnVal: %s", lmdnVal, umdnVal));
		return new int[] {lmdnVal, umdnVal};		
	}

	boolean valid(int[] nums1, int[] nums2, int lo1, int hi1, int lo2, int hi2) {
		return !(lo1<0 || hi1<0 || lo2<0 || hi2<0 || lo1>=nums1.length || hi1>= nums1.length || lo2>=nums2.length || hi2>= nums2.length);
	}

	int doBS(int[] nums, int lo, int hi, int val) {
		int pos = -1;
		int mid = -1;
		
		if(lo == hi) {
			if(val <= nums[lo]) pos = lo;
			else pos = lo+1;
		}
		else if(val <= nums[lo]) pos = lo;
		else if(val >= nums[hi]) pos = hi+1;
		else {
			mid = lo + (hi-lo)/2;			
			if (nums[mid] > val) {			
				 pos = doBS(nums, lo, mid-1, val);			
			} else if (nums[mid] < val) {			
		  		pos = doBS(nums, mid+1, hi, val);		
			} else {
				pos = mid;
			}
		}
		System.out.println(String.format("nums: %s; lo: %s; hi: %s; val: %s; mid: %s; pos: %s", Arrays.toString(nums), lo, hi, val, mid, pos));		
		return pos;
	}
	
	public static void main(String[] args) {
		int[] nums1 = null;
		int[] nums2 = null;
		MedianTwoSortedArraysV1 msa = null;
		double expected = -1d;
		double actual = -1d;

		nums1 = new int[] { 1, 3, 5, 7, 9 };
		nums2 = new int[] { 2, 4, 6, 8, 10 };
		msa = new MedianTwoSortedArraysV1();
		actual = msa.findMedianSortedArrays(nums1, nums2);
		expected = 5.5d;

		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");

		nums1 = new int[] { 1, 3, 5, 7, 9, 11, 15, 17, 21, 23 };
		nums2 = new int[] { 2, 4, 6, 8, 10 };
		msa = new MedianTwoSortedArraysV1();
		actual = msa.findMedianSortedArrays(nums1, nums2);
		expected = 8d;

		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");

		nums1 = new int[] { 1, 2 };
		nums2 = new int[] { 3, 4 };
		msa = new MedianTwoSortedArraysV1();
		actual = msa.findMedianSortedArrays(nums1, nums2);
		expected = 2.5d;

		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");

		nums1 = new int[] { 1, 3 };
		nums2 = new int[] { 2 };
		msa = new MedianTwoSortedArraysV1();
		actual = msa.findMedianSortedArrays(nums1, nums2);
		expected = 2d;

		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");
		
		nums1 = new int[] {  };
		nums2 = new int[] { 1 };
		msa = new MedianTwoSortedArraysV1();
		actual = msa.findMedianSortedArrays(nums1, nums2);
		expected = 1d;

		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");
		
		nums1 = new int[] {1};
		nums2 = new int[] {1};
		msa = new MedianTwoSortedArraysV1();
		actual = msa.findMedianSortedArrays(nums1, nums2);
		expected = 1d;

		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");
		
		nums1 = new int[] {1};
		nums2 = new int[] {2, 3, 4};
		msa = new MedianTwoSortedArraysV1();
		actual = msa.findMedianSortedArrays(nums1, nums2);
		expected = 2.5d;

		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");

	}
