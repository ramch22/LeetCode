public class MinRefuelingStops871II {
	public int minRefuelStops(int target, int startFuel, int[][] stations) {
		int N = stations.length;
		if(target <= startFuel) return 0;
	    else if(N==0) return -1;
		ArrayList<int[]> topoSortedlist = new ArrayList<>();
		for(int[] st : stations) {			
			topoSortedlist.add(st);		
		}
		
		topoSortedlist.sort(new Comparator<int[]>() {
			@Override
			public int compare(int[] o1, int[] o2) {
				if (o1[0] < o2[0])
					return -1;
				else if (o1[0] > o2[0])
					return 1;
				else {
					if ((o1[0] + o1[1]) > (o2[0]+ o2[1]))
						return -1;
					else if ((o1[0]+o1[1]) < (o1[0]+o2[1]))
						return 1;
					else
						return 0;
				}
			}
		});
		ArrayList<int[]>  sidxs = new ArrayList<>();
		int[][] topoSorted = new int[topoSortedlist.size()][3];
		int index = 0;
		for (int[] st : topoSortedlist) {
			int[] sti = new int[] {st[0], st[1], index};
			topoSorted[index] = sti;
			if(st[0] <= startFuel) sidxs.add(sti);
			index++;
		}
		return dfs(topoSorted, target, startFuel, stations, sidxs);
	}

	int dfs(int[][] topoSorted, int target, int startFuel, int[][] stations, ArrayList<int[]> sidxs) {
		System.out.println(String.format("target: %s; startFuel: %s; sidxs: %s", target, startFuel, sidxs.stream().map(k -> String.valueOf(Arrays.toString(k))).collect(Collectors.joining(" ,"))));
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------");
		for(int[] sst : topoSorted) {
			System.out.print(Arrays.toString(sst) + " , ");
		}
		System.out.println("----------------------------------------------------------------------------------------------------------------------------------");
		
		int N = topoSorted.length;
		int[] parent = new int[N];
		int[] stepsTo = new int[N];
		int[] distTo = new int[N];
		boolean[] visited = new boolean[N];
		Arrays.fill(parent, Integer.MAX_VALUE);
		Arrays.fill(stepsTo, Integer.MAX_VALUE);
		Arrays.fill(distTo, Integer.MAX_VALUE);
		
		sortByMaxdiff(sidxs);
		System.out.println("sidxs: " + sidxs.stream().map(k -> Arrays.toString(k)).collect(Collectors.joining(" , ")));

		int min = Integer.MAX_VALUE;
		for (int[] mdiffSorted : sidxs) {			
			int start = mdiffSorted[0];
			int fuel = mdiffSorted[1];
			int index = mdiffSorted[2];
			if (!visited[index]) {
				System.out.println(String.format("calling dfs for index: %s; remfuel: %s; station: %s; min: %s; N: %s; target: %s", 
						index, fuel, Arrays.toString(mdiffSorted), min, N, target));
				int steps = dfs(mdiffSorted, null, startFuel, 0,  topoSorted, stations,  parent, stepsTo, N, target, visited);
				min = Math.min(steps, min);
				
			}
		}
		if(min == Integer.MAX_VALUE) min = -1;			
		return min;
	}

	void sortByMaxdiff(ArrayList<int[]> sidxs) {
		sidxs.sort(new Comparator<int[]>() {
			@Override
			public int compare(int[] o1, int[] o2) {
				if((o1[1]-o1[0]) > (o2[1]-o2[0])) return -1;
				else if((o1[1]-o1[0]) < (o2[1]-o2[0])) return 1;
				return 0;
			}
		});
	}

	int dfs(int[] cSt, int[] pSt, int extrafuel, int distTravelled, int[][] topoSorted, int[][] stations, int[] parent, int[] stepsTo, int N, int target, boolean[] visited) {	
		int cstart = cSt[0];
		int cfuel  = cSt[1];
		int cindex = cSt[2];
		visited[cindex] = true;
		int min_steps = Integer.MAX_VALUE;
		int min_p = Integer.MAX_VALUE;
		
		int totalfuel = extrafuel + cfuel;
		int fuelConsumed = (pSt == null) ? cstart : cSt[0] - pSt[0];
		int remfuel = totalfuel-fuelConsumed;
		int totalDistTravelled = (pSt == null) ? (distTravelled + cSt[0]) : (distTravelled + cSt[0]-pSt[0]);
		
		System.out.println(String.format("pstart: %s; pfuel: %s; pindex: %s; extrafuel: %s; distTravelled: %s; totalDistTravelled: %s; parent: %s; stepsTo: %s; visited: %s; totalfuel: %s; fuelConsumed: %s; remfuel: %s",
				cstart, cfuel, cindex, extrafuel, distTravelled, totalDistTravelled, Arrays.toString(parent), Arrays.toString(stepsTo), Arrays.toString(visited), totalfuel, fuelConsumed, remfuel));
	
		if((totalDistTravelled  + remfuel) >= target) {
			System.out.println(String.format("reached-target with remaining fuel: %s;", distTravelled + cfuel));
			min_steps = 1;
			min_p = -1;
		} else {
			ArrayList<int[]> adjSts = getAdj(cSt, remfuel, topoSorted, N, visited);
			if(!adjSts.isEmpty()) {
				sortByMaxdiff(adjSts);
				System.out.println("adjSts: " + adjSts.stream().map(k -> Arrays.toString(k)).collect(Collectors.joining(" , ")));
				for(int[] adjSt : adjSts) {
					System.out.println("adjSt: " + Arrays.toString(adjSt) + " aremfuel: " + remfuel);
					int steps = dfs(adjSt, cSt, remfuel, totalDistTravelled, topoSorted, stations, parent, stepsTo, N, target, visited);
					System.out.println(" steps: " + steps);
					if(steps != Integer.MAX_VALUE && 1+steps < min_steps) {			
						min_steps = 1+steps;
						min_p = adjSt[2];
						System.out.println("min_steps: " + min_steps + " min_p: " + min_p);
					}			
				}
			}			
		}	
		int index = cSt[2];
		if (min_steps != Integer.MAX_VALUE) {			
			stepsTo[index] = min_steps;
			parent[index] = min_p;
			System.out.println("min_steps: " + min_steps + " min_p: " + min_p);
		}
		System.out.println("returning steps: " + stepsTo[index] + " for index: " + index);
		return stepsTo[index];	
	}

	ArrayList<int[]> getAdj(int[] pSt, int remFuel, int[][] topoSorted, int N, boolean[] visited) {
		System.out.println(String.format("getting adj stations for pSt: %s; with remaining fuel: %s ", Arrays.toString(pSt), remFuel));
		int pindex = pSt[2];
		int pStart = pSt[0];
		ArrayList<int[]> adjlist = new ArrayList<>();
		for(int adj = pindex+1; adj < N; adj++) {
			int[] adjSt = topoSorted[adj];
			int adjStart = adjSt[0];
			int adjIndex = adjSt[2];
			if(remFuel >= (adjStart-pStart) && !visited[adjIndex]) {
				adjlist.add(adjSt);
			}		
		}
		System.out.println("next stations: " + adjlist.stream().map(k -> Arrays.toString(k)).collect(Collectors.joining(" , ")));
		return adjlist;
	}
	
	public static void main(String[] args) {
		int target = -1;
		int startFuel = -1;
		int [][] stations = null;		
		MinRefuelingStops871II mrs = null;
		int actual = -1;
		int expected = -1;
		
		target = 100;
		startFuel = 10;
		stations = new int[][] {{10,60},{20,30},{30,30},{60,40}};
		mrs = new MinRefuelingStops871II();
		expected = 2;
		actual = mrs.minRefuelStops(target, startFuel, stations);
		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");
		
		target = 100;
		startFuel = 50;
		stations = new int[][] {{50, 50}};
		mrs = new MinRefuelingStops871II();
		expected = 1;
		actual = mrs.minRefuelStops(target, startFuel, stations);
		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");
		
		target = 100;
		startFuel = 25;
		stations = new int[][] {{25,25},{50,25},{75,25}};
		mrs = new MinRefuelingStops871II();
		expected = 3;
		actual = mrs.minRefuelStops(target, startFuel, stations);
		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");
		
		target = 1000;
		startFuel = 299;
		stations = new int[][] {{13,21},{26,115},{100,47},{225,99},{299,141},{444,198},{608,190},{636,157},{647,255},{841,123}};
		mrs = new MinRefuelingStops871II();
		expected = 4;
		actual = mrs.minRefuelStops(target, startFuel, stations);
		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");
	}

}
