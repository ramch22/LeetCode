import java.util.*;
import java.util.stream.Collectors;

import org.junit.Assert;

public class DailyTemperatures739 {

	public int[] dailyTemperatures(int[] T) {
		System.out.println("T: " + Arrays.toString(T));
		Deque<Integer> tStack = new ArrayDeque<>();
		int[] rmax = new int[T.length];
		int[] maxDays2Wait = new int[T.length];
		tStack.push(T.length - 1);
		rmax[T.length - 1] = -1;
		int tsPeek  = -1;
		
		for (int i = T.length - 2; i >= 0; i--) {
			int currT = T[i];
			ArrayList<Integer> popped = new ArrayList<>();
			while (!tStack.isEmpty() && currT >= T[tStack.peek()]) {
				tsPeek = tStack.pop();
				popped.add(tsPeek);				
			}
			if(!popped.isEmpty()) {
				System.out.println("popped: " + popped.stream().map(k -> String.valueOf(k)).collect(Collectors.joining(" , ")));
			}
			if (!tStack.isEmpty() && currT < T[tStack.peek()]) {
				rmax[i] = tStack.peek();
			} else {
				rmax[i] = -1;
			}
			System.out.println("i: " + i + " rmax: " + Arrays.toString(rmax));
			tStack.push(i);
		}
		
		for (int i = 0; i < rmax.length; i++) {
			maxDays2Wait[i] = (rmax[i] == -1) ? 0 : (rmax[i] - i);
		}
		return maxDays2Wait;
	}

	public static void main(String[] args) {
		int[] T = null;
		DailyTemperatures739 dt = null;
		int[] expecteds = new int[] {};
		int[] actuals = new int[] {};

		dt = new DailyTemperatures739();
		T = new int[] { 73, 74, 75, 71, 69, 72, 76, 73 };
		expecteds = new int[] { 1, 1, 4, 2, 1, 1, 0, 0 };
		actuals = dt.dailyTemperatures(T);
		System.out.println("actuals: " + Arrays.toString(actuals));
		Assert.assertArrayEquals(expecteds, actuals);
		System.out.println(
				" ############################################################################################################################## ");
		
		dt = new DailyTemperatures739();
		T = new int[] {89,62,70,58,47,47,46,76,100,70};
		expecteds = new int[] {8,1,5,4,3,2,1,1,0,0};
		actuals = dt.dailyTemperatures(T);
		System.out.println("actuals: " + Arrays.toString(actuals));
		Assert.assertArrayEquals(expecteds, actuals);
		System.out.println(
				" ############################################################################################################################## ");


	}

}
