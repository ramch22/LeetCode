import java.util.*;
import java.util.stream.Collectors;

class Interval {
	public int start;
	public int end;

	public Interval() {
	}
	public Interval(int _start, int _end) {
		start = _start;
		end = _end;
	}
}

class EmpIntervalComparator implements Comparator<Interval> {
	@Override
	public int compare(Interval o1, Interval o2) {
		int compare = (o1.start < o2.start) ? -1 : (o1.start > o2.start) ? 1 : 0;
		if (compare == 0) {
			compare = (o1.end < o2.end) ? -1 : (o1.end > o2.end) ? -1 : 0;
		}
		return compare;
	}
}

public class EmployeeFreeTime759 {
	
	public List<Interval> employeeFreeTime(List<List<Interval>> schedule) {
		List<Interval> freeTimeList = new ArrayList<>();
        ArrayList<Interval> allEmpIntervals = new ArrayList<>();
        for(List<Interval> intervalList : schedule) {
        	allEmpIntervals.addAll(intervalList);
        }
        allEmpIntervals.sort(new EmpIntervalComparator());
        
        HashMap<Integer, LinkedList<Interval>> overlappingIntervalsMap = new HashMap<>();
        int currRoot = 1;
        Interval prev = null;
        
        for(int i=0; i < allEmpIntervals.size(); i++) {
        	Interval curr = allEmpIntervals.get(i);
        	Interval overlapping = overlappingInterval(prev, curr);
        	if (prev == null || overlapping != null) {
        		overlappingIntervalsMap.compute(currRoot, (k, v) -> (v == null) ? new LinkedList<>() : v).add(curr);
        		prev = (prev != null) ? overlapping : curr;
        	} else if (overlapping == null) {
        		currRoot++;
        		freeTimeList.add(new Interval(prev.end, curr.start));
        		prev = curr;        		
        	}
        }
        return freeTimeList;
    }

	Interval overlappingInterval(Interval prev, Interval curr) {
		if(prev != null && prev.end >= curr.start) return new Interval(Math.min(prev.start, curr.start), Math.max(prev.end, curr.end));
		return null;
	}
	
	public static void main(String[] args) {
		List<List<Interval>> schedules = null;
		EmployeeFreeTime759 eft = null;
		int[][][] empSchedules = null;
		List<Interval> freeIntervals = null;

		
		empSchedules = new int[][][] {{{1,3},{6,7}},{{2,4}},{{2,5},{9,12}}};
		schedules = getEmpSchedules(empSchedules);
		eft = new EmployeeFreeTime759();
		freeIntervals = eft.employeeFreeTime(schedules);
		System.out.println("free-intervals: " + freeIntervals.stream().map(k -> String.valueOf(k.start) + " - " + String.valueOf(k.end)).collect(Collectors.joining(" , ")));	
		System.out.println(" ############################################################################################################################## ");
		
		empSchedules = new int[][][] {{{1,2},{5,6}},{{1,3}},{{4,10}}};
		schedules = getEmpSchedules(empSchedules);
		eft = new EmployeeFreeTime759();
		freeIntervals = eft.employeeFreeTime(schedules);
		System.out.println("free-intervals: " + freeIntervals.stream().map(k -> String.valueOf(k.start) + " - " + String.valueOf(k.end)).collect(Collectors.joining(" , ")));	
		System.out.println(" ############################################################################################################################## ");
	}
	
	static List<List<Interval>> getEmpSchedules(int[][][] empSchedules) {
		List<List<Interval>> schedules = new ArrayList<>();
		for(int[][] empSchedule : empSchedules) {
			ArrayList<Interval> empScheduleList = new ArrayList<>();
			for(int[] sch : empSchedule) {
				empScheduleList.add(new Interval(sch[0], sch[1]));
			}
			schedules.add(empScheduleList);		
		}	
		return schedules;
	}
}

