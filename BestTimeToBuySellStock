class Solution {
public class BuySellStockDPKTran {
	public int maxProfit(int k, int[] prices) {
		if (k == 0)
			return 0;
		if (prices.length == 0 || prices.length == 1)
			return 0;
		if (k > prices.length)
			k = prices.length;
		ArrayList<ArrayList<Integer>> plist = new ArrayList<>(prices.length);
		for (int i = 0; i < prices.length; i++) {
			plist.add(i, new ArrayList<>());
			for (int j = i + 1; j < prices.length; j++) {
				if (prices[i] < prices[j]) {
					plist.get(i).add(j);
				}
			}
		}

		int[][] maxdp = new int[prices.length][k + 1];
		for (int i = 0; i < prices.length; i++) {
			Arrays.fill(maxdp[i], Integer.MIN_VALUE);
		}

		for (int index = plist.size() - 2; index >= 0; index--) {
			getMaxProfit(plist, 1, k, prices, index, prices.length - 1, maxdp);
		}
		int maxProfit = Integer.MIN_VALUE;
		for (int i = 0; i < maxdp.length; i++) {
			for (int kk = 1; kk <= k; kk++) {
				maxProfit = Math.max(maxdp[i][kk], maxProfit);
			}
		}
		return (maxProfit == Integer.MIN_VALUE) ? 0 : maxProfit;
	}

	void getMaxProfit(ArrayList<ArrayList<Integer>> plist, int k, int K, int[] prices, int index, int endindex,
			int[][] maxdp) {
		if (index >= plist.size() || k > K)
			return;

		ArrayList<Integer> profits = plist.get(index);
		if (profits.isEmpty()) {
			return;
		}

		if (maxdp[index][k] != Integer.MIN_VALUE)
			return;

		int startPrice = prices[index];
		int max = Integer.MIN_VALUE;
		int maxk = -1;

		Integer[] profitsArr = profits.toArray(new Integer[] {});

		for (int i = 0; i < profitsArr.length; i++) {
			int pi = profitsArr[i];
			int profitPrice = prices[pi];
			int profit = profitPrice - startPrice;
			int nextindex = pi + 1;
			while (nextindex < plist.size() && plist.get(nextindex).isEmpty()) {
				nextindex++;
			}

			int ik = 1;
			maxdp[index][1] = Math.max(profit, maxdp[index][1]);
			if (nextindex < plist.size()) {
				if (k + 1 <= K && maxdp[nextindex][k + 1] == Integer.MIN_VALUE) {
					getMaxProfit(plist, k + 1, K, prices, nextindex, endindex, maxdp);
				}

				int currNextIndex = nextindex;
				if (!plist.get(currNextIndex).isEmpty()) {
					for (int kk = 1; kk <= K; kk++) {
						if (maxdp[currNextIndex][kk] != Integer.MIN_VALUE) {
							int currK = kk + ik;
							int currProfit = maxdp[currNextIndex][kk] + profit;
							if (currK <= K) {
								maxdp[index][currK] = Math.max(maxdp[index][currK], currProfit);
							}
						}
					}
				}
			}
		}

		int exclindex = index + 1;
		while (exclindex < plist.size() - 1 && plist.get(exclindex).isEmpty()) {
			exclindex++;
		}

		for (int kk = 1; kk <= K; kk++) {
			if (maxdp[exclindex][kk] != Integer.MIN_VALUE) {
				maxdp[index][kk] = Math.max(maxdp[index][kk], maxdp[exclindex][kk]);
			}

		}
	}

	void print(ArrayList<ArrayList<Integer>> plist, int K, int[] prices, int[][] maxdp) {
		System.out.println(String.format("K: %s; prices: %s; plist: %s%n;", K, Arrays.toString(prices),
				plist.stream().map(k -> k.stream().map(ki -> String.valueOf(ki)).collect(Collectors.joining(" , ")))));
		for (int ei = maxdp.length - 1; ei >= 0; ei--) {
			System.out.println(String.format("maxdp-index: %s; vals: %s", ei, Arrays.toString(maxdp[ei])));
		}
	}

}
