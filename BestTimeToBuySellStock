class Solution {
int maxProfit = 0;
	

	public int maxProfit(int k, int[] prices) {
		if (prices.length == 0)
			return 0;

		int P = prices.length;
		int[] rmax = update(prices, P, 1);
		int[] rmin = update(prices, P, -1);
		
		ArrayList<int[]> profits = new ArrayList<>();

		ArrayList<ArrayList<int[]>> dprmax = new ArrayList<>(P);
		for (int p = 0; p < P; p++) {
			dprmax.add(p, new ArrayList<>());
		}

		for (int p = P - 2; p >= 0; p--) {
			int rmaxp = rmax[p];
			boolean[] visited = new boolean[P];
			update(rmaxp, P, p, visited, rmax, rmin, dprmax, prices);
			if (rmax[p] < P && rmin[rmax[p]] < P) {
				update(rmin[rmax[p]], P, p, visited, rmax, rmin, dprmax, prices);
			}
			if (rmin[p] < P && rmax[rmin[p]] < P) {
				update(rmax[rmin[p]], P, p, visited, rmax, rmin, dprmax, prices);
			}

		}
		for (ArrayList<int[]> list : dprmax) {
			profits.addAll(list);
		}
		profits.sort(new Comparator<int[]>() {
			@Override
			public int compare(int[] o1, int[] o2) {
				if (o1[0] < o2[0])
					return -1;
				else if (o1[0] > o2[0])
					return 1;
				else {
					if (o1[1] < o2[1])
						return -1;
					else if (o1[1] > o2[1])
						return 1;
					else
						return 0;
				}
			}
		});
		int[][] orderedProfits = new int[profits.size()][2];
		
		int index = 0;
		for (int[] profit : profits) {
			orderedProfits[index++] = profit;			
		}
			
		int[] minIndexes = new int[orderedProfits.length];
		for(int i = 0; i < orderedProfits.length; i++) {
			minIndexes[i] = doBS(orderedProfits, i);
		}
		compute(orderedProfits, P, k, prices, minIndexes);
		return this.maxProfit;
	}

	void update(int rmaxp, int P, int p, boolean[] visited, int[] rmax, int[] rmin, ArrayList<ArrayList<int[]>> dprmax,
			int[] prices) {
		boolean init = true;
		while (rmaxp < P) {
			if (init) {
				init = false;
				if (!visited[rmaxp] && prices[rmaxp] > prices[p])
					dprmax.get(p).add(new int[] { p, rmaxp });
			}
			if (!dprmax.get(rmaxp).isEmpty()) {
				for (int[] max : dprmax.get(rmaxp)) {
					if (!visited[max[1]] && prices[max[1]] > prices[p]) {
						dprmax.get(p).add(new int[] { p, max[1] });
						visited[max[1]] = true;
					}

				}
			}
			visited[rmaxp] = true;
			rmaxp = rmax[rmaxp];
		}
	}

	int compute(int[][] profits, int P, int K, int[] prices, int[] minIndexes) {
		int[][] dp = new int[profits.length][K+1];
		int[] parent = new int[profits.length];
		for(int i = 0; i < dp.length; i++) {
			Arrays.fill(dp[i], Integer.MIN_VALUE);
		}

		for (int index = 0; index < profits.length; index++) {
			int localMax = compute(profits, index, 1, P, K, dp, parent, prices, minIndexes);
			if (this.maxProfit < localMax) {
				this.maxProfit = localMax;
			}
		}
		return this.maxProfit;
	}

	int compute(int[][] profits, int index, int k, int P, int K, int[][] dp, int[] parr, int[] prices, int[] minvidxes) {
		if (index >= profits.length || k > K)
			return -1;
		
		if(dp[index][k] != Integer.MIN_VALUE) return dp[index][k];

		int globalMaxProfit = prices[profits[index][1]] - prices[profits[index][0]];
		int pindex = index;

		int minIndex = minvidxes[index];
		if (minIndex != -1) {
			for (int i = minIndex; i < profits.length; i++) {
				int validProfit = compute(profits, i, k + 1, P, K, dp, parr, prices, minvidxes);
				if (validProfit != -1
						&& globalMaxProfit < (prices[profits[index][1]] - prices[profits[index][0]] + validProfit)) {
					globalMaxProfit = (prices[profits[index][1]] - prices[profits[index][0]] + validProfit);
					pindex = i;
				}
			}
		}
		dp[index][k] = globalMaxProfit;
		parr[index] = pindex;
		return dp[index][k];
	}

	int doBS(int[][] profits, int index) {
		if (index >= profits.length)
			return -1;
		int ei = profits[index][1];
		int si = profits[index][0];

		int minIndex = doBS(profits, index + 1, profits.length - 1, si, ei);
		return minIndex;
		
	}

	int doBS(int[][] profits, int lo, int hi, int si, int ei) {
		if (lo > hi)
			return -1;
		if (lo == hi && (profits[lo][0] >= ei))
			return lo;
		else if (lo == hi)
			return -1;
		int mid = lo + ((hi - lo) / 2);

		if (profits[mid][0] < ei) {
			return doBS(profits, mid + 1, hi, si, ei);
		} else if (profits[mid][0] > ei) {
			int equalei = doBS(profits, lo, mid - 1, si, ei);
			if(equalei == -1) return mid;
			else return equalei;
		}
		return mid;
	}

	int[] update(int[] prices, int P, int dir) {
		int[] rds = new int[P];
		if (dir == 1)
			Arrays.fill(rds, Integer.MIN_VALUE);
		else
			Arrays.fill(rds, Integer.MAX_VALUE);

		Deque<Integer> stack = new ArrayDeque<>();
		stack.push(0);

		int j = -1;
		for (int i = 1; i < P; i++) {
			while (!stack.isEmpty()) {
				if ((dir == 1 && prices[i] > prices[stack.peek()]) || (dir == -1 && prices[i] < prices[stack.peek()])) {
					j = stack.pop();
					rds[j] = i;
				} else
					break;
			}
			stack.push(i);
		}
		while (!stack.isEmpty()) {
			j = stack.pop();
			rds[j] = P;
		}
		return rds;
	}
    
}
