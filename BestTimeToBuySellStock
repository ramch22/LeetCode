class Solution {
public int maxProfit(int k, int[] prices) {
		ArrayList<ArrayList<Integer>> plist = new ArrayList<>(prices.length);
		for (int i = 0; i < prices.length; i++) {
			plist.add(i, new ArrayList<>());
			for (int j = i + 1; j < prices.length; j++) {
				if (prices[i] < prices[j]) {
					plist.get(i).add(j);
				}
			}
		}
		k = prices.length - 1;
		int[][][] dp = new int[prices.length][prices.length][k + 1];
		int maxProfit = getMaxProfit(plist, 1, prices, 0, prices.length - 1, dp);
		
		System.out.println("prices: " + Arrays.toString(prices));
		for (int i = 0; i < plist.size(); i++) {
			ArrayList<Integer> pilist = plist.get(i);
			System.out.println("i: " + i + " pilist: " + pilist.stream().map(key -> String.valueOf(key)).collect(Collectors.joining(" , ")));
			for (int pi : pilist) {
				System.out.println("profits: " + Arrays.toString(dp[i][pi]));
			}
		}
		return maxProfit;
	}

	int getMaxProfit(ArrayList<ArrayList<Integer>> plist, int k, int[] prices, int index, int endindex, int[][][] dp) {
		if (index >= plist.size())
			return 0;

		ArrayList<Integer> profits = plist.get(index);
		if (profits.isEmpty())
			return 0;

		int startPrice = prices[index];
		int incl = -1;
		int excl = -1;
		int max = Integer.MIN_VALUE;

		for (int pi : profits) {
			int profitPrice = prices[pi];
			int profit = profitPrice - startPrice;
			int nextindex = index + 1;
			while (nextindex < plist.size() && plist.get(nextindex).isEmpty()) {
				nextindex++;
			}
			if (excl == -1) {
				incl = profit;
				if (nextindex < plist.size()) {
					incl = profit + getMaxProfit(plist, k + 1, prices, nextindex, endindex, dp);
				}
			} else
				incl = excl;

			dp[index][pi][k] = incl;
			max = Math.max(dp[index][pi][k], max);

			excl = 0;
			int nextpi = pi + 1;
			if (nextpi < profits.size()) {
				int nextProfitPrice = prices[nextpi];
				int nextProfit = nextProfitPrice - startPrice;
				excl = nextProfit + getMaxProfit(plist, k + 1, prices, nextindex, endindex, dp);
			}
		}
		return (max == Integer.MIN_VALUE) ? 0 : max;
	}

	public static void main(String[] args) {
		int[] prices = null;
		BuySellStockIV188INEX bss = null;
		int actual = -1;
		int expected = -1;
		int k = -1;

		prices = new int[] { 3, 2, 6, 5, 0, 3 };
		bss = new BuySellStockIV188INEX();
		expected = 7;
		k = 2;
		actual = bss.maxProfit(k, prices);
		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");

		prices = new int[] { 2, 4, 1 };
		bss = new BuySellStockIV188INEX();
		expected = 2;
		k = 2;
		actual = bss.maxProfit(k, prices);
		System.out.println("actual: " + actual);
		Assert.assertEquals(expected, actual);
		System.out.println(
				"####################################################################################################");
	}

}
