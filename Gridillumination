package study.algos.leetcode.hard;

import java.util.*;
import java.util.Objects;

class Point {
	@Override
	public String toString() {
		return "Point [x=" + x + ", y=" + y + "]";
	}

	@Override
	public int hashCode() {
		return Objects.hash(x, y);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof Point)) {
			return false;
		}
		Point other = (Point) obj;
		return x == other.x && y == other.y;
	}

	int x;
	int y;

	Point(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class GridIllumination1001 {

	static int[] gridIllumination(int N, int[][] lamps, int[][] queries) {
		HashMap<Integer, HashSet<Point>> lampsHash = new HashMap<>();
		int[] res = new int[queries.length];
		for (int[] lamp : lamps) {
			Point p = new Point(lamp[0], lamp[1]);
			int[] allhash = getHash(p, N);
			for (int i = 0; i < allhash.length; i++) {
				lampsHash.compute(allhash[i], (key, val) -> (val == null) ? new HashSet<>() : val).add(p);
				System.out.println("i: " + i + " Point p: " + p + " Hash: " + allhash[i]);
			}
		}

		for (int i = 0; i < queries.length; i++) {
			int[] query = queries[i];
			Point q = new Point(query[0], query[1]);
			boolean[] hashesExists = updatelampsHash(lampsHash, q, N);
			System.out.println("qHashesExists: " + Arrays.toString(hashesExists));
			for(boolean hashExists : hashesExists) {
				if(hashExists) res[i] = 1;
			}
			if (res[i] != 1) res[i] = 0;
			for (int r = -1; r <= 1; r++) {
				for (int c = -1; c <= 1; c++) {
					if ((r == 0 && c == 0) || q.x + r < 0 || q.y + c < 0)
						continue;
					Point adjP = new Point(q.x + r, q.y + c);
					boolean[] adjpHashesExists = updatelampsHash(lampsHash, adjP, N);
					System.out.println("adjpHashesExists: " + Arrays.toString(adjpHashesExists));
				}
			}
		}
		return res;
	}
	
	static boolean[] updatelampsHash(HashMap<Integer, HashSet<Point>> lampsHash, Point p, int N) {
		int[] hashes = getHash(p, N);
		System.out.println(String.format("adjpHash: %s; adjP: %s;", Arrays.toString(hashes), p));
		
		boolean[] hashesExists = new boolean[hashes.length];
		for (int i = 0; i < hashes.length; i++) {
			int hash = hashes[i];
			if (lampsHash.containsKey(hash)) {
				hashesExists[i] = true;
				HashSet<Point> pointSet = lampsHash.get(hash);
				if (!pointSet.isEmpty() && pointSet.contains(p)) {
					pointSet.remove(p);
					if (pointSet.isEmpty())
						lampsHash.remove(hash);
				}
			}
		}
		return hashesExists;
	}

	static int[] getHash(Point p, int N) {
		int to00 = Math.min(p.x, p.y);
		int toL0 = Math.min(N - 1 - p.x, p.y);
		int to0H = Math.min(p.x, N - 1 - p.y);
		int toLH = Math.min(N - 1 - p.x, N - 1 - p.y);
		Point p1 = new Point(p.x - to00, p.y - to00);
		Point p2 = new Point(p.x + toL0, p.y - toL0);
		Point p3 = new Point(p.x - to0H, p.y + to0H);
		Point p4 = new Point(p.x + toLH, p.y + toLH);
		
		swap(p1, p4);
		int ldHash = Objects.hash(p1, p4);
		swap(p2, p3);
		int rdHash = Objects.hash(p2, p3);

		Point rp1 = new Point(p.x, 0);
		Point rp2 = new Point(p.x, N - 1);
		int rowHash = Objects.hash(rp1, rp2);

		Point cp1 = new Point(0, p.y);
		Point cp2 = new Point(N - 1, p.y);
		int colHash = Objects.hash(cp1, cp2);

		int[] hash = new int[] { ldHash, rdHash, rowHash, colHash };
		System.out.println(String.format("ld: %s, %s, %s; rd: %s, %s, %s; row: %s, %s, %s; col: %s, %s, %s; FOR POINT %s", p1, p4,
				ldHash, p2, p3, rdHash, rp1, rp2, rowHash, cp1, cp2, colHash, p));
		return hash;

	}
	
	static void swap(Point p1, Point p2) {
		if(p1.x > p2.x) {
			Point temp = p1;
			p1 = p2;
			p2 = temp;		
		}
	}

	public static void main(String[] args) {
		int N = 5;
		int[][] lamps = {{}};
		int[][] queries = {{}};
		
		N= 5;
		lamps = new int[][]{ { 0, 0 }, { 4, 4 } };
		queries = new int[][]{ { 1, 1 }, { 1, 0 } };
		System.out.println(Arrays.toString(gridIllumination(N, lamps, queries)));
		System.out.println(
		"################################################################################################################");
		
		N= 5;
		lamps = new int[][] {{0,0},{0,4}};
		queries = new int[][]{{0,4},{0,1},{1,4}};
		System.out.println(Arrays.toString(gridIllumination(N, lamps, queries)));
		System.out.println(
		"################################################################################################################");
		
		N= 100;
		lamps = new int[][] {{7,55},{53,61},{2,82},{67,85},{81,75},{38,91},{68,0},{60,43},{40,19},{12,75},{26,2},{24,89},{42,81},{60,58},{77,72},{33,24},{19,93},{7,16},{58,54},{78,57},{97,49},{65,16},{42,75},{90,50},{89,34},{76,97},{58,23},{62,47},{94,28},{88,65},{3,87},{81,10},{12,81},{44,81},{54,92},{90,54},{17,54},{27,82},{48,15},{8,46},{4,99},{15,13},{90,77},{2,87},{18,33},{52,90},{4,95},{57,61},{31,22},{32,8},{49,26},{24,65},{88,55},{88,38},{64,76},{94,76},{59,12},{41,46},{80,28},{38,36},{65,67},{75,37},{56,97},{83,57},{2,4},{44,43},{71,90},{62,40},{79,94},{81,11},{96,34},{38,11},{22,3},{54,96},{78,33},{54,54},{79,98},{1,28},{0,32},{37,11}};
		queries = new int[][]{{24,84},{95,68},{80,35},{31,53},{69,45},{85,29},{87,25},{42,47},{7,59},{99,3},{31,70},{64,62},{44,91},{55,25},{15,52},{95,33},{21,29},{61,34},{93,34},{79,27},{30,86},{52,0},{18,10},{5,1},{40,21},{11,48},{55,94},{22,42},{81,0},{39,43},{5,25},{43,29},{45,47},{83,93},{77,70},{22,63},{30,73},{18,48},{39,88},{91,47}};
		System.out.println(Arrays.toString(gridIllumination(N, lamps, queries)));
		System.out.println(
		"################################################################################################################");
	}

}
