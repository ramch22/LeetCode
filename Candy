class Solution {
    		public int candy(int[] ratings) {
		int[] candy = new int[ratings.length];
		Arrays.fill(candy, -1);
		int N = ratings.length;
		setDefaults(candy, ratings, N);
		return compute(candy, ratings);
	}

	int compute(int[] candy, int[] ratings) {
		int N = ratings.length;
		boolean[] visiting = new boolean[N];
		for (int i = 0; i < N; i++) {
			if (candy[i] == -1) {
				int candyi = dfs(i, candy, ratings, N, visiting);				
			}
		}
		int sum = 0;

		for (int i = 0; i < N; i++) {
			sum += (candy[i] != -1) ? candy[i] : Integer.MIN_VALUE;
		}
		return sum;

	}

	void setDefaults(int[] candy, int[] ratings, int N) {
		for (int i = 0; i < N; i++) {
			int lv = (i - 1 >= 0) ? ratings[i - 1] : Integer.MAX_VALUE;
			int rv = (i + 1 < N) ? ratings[i + 1] : Integer.MAX_VALUE;
			int cv = ratings[i];
			if (lv >= cv && rv >= cv) {
				candy[i] = 1;
			}
		}
	}

int dfs(int index, int[] candy, int[] ratings, int N, boolean[] visiting) {		
		if (index < 0 || index >= N)
			return Integer.MIN_VALUE;
		if (candy[index] != -1)
			return candy[index];
		int indexCandyCnt = Integer.MIN_VALUE;
		if(!visiting[index]) {
			visiting[index] = true;
			int rcandyCnt = Integer.MIN_VALUE;
			int lcandyCnt = Integer.MIN_VALUE;
			if(index==0 && index+1 < N) {
				if(candy[index+1] != -1 && ratings[index] > ratings[index+1])  indexCandyCnt = candy[index+1] + 1;
				else {
					int zeroindexCandyCnt = dfs(index + 1, candy, ratings, N, visiting);
					if(zeroindexCandyCnt != Integer.MIN_VALUE) indexCandyCnt = zeroindexCandyCnt + 1;
				}				
			}else if(index==N-1 && index-1 >= 0) {
				if(candy[index-1] != -1 && ratings[index] > ratings[index-1])  indexCandyCnt = candy[index-1] + 1;
				else {
					int n1indexCandyCnt = dfs(index - 1, candy, ratings, N, visiting);
					if(n1indexCandyCnt != Integer.MIN_VALUE) indexCandyCnt = n1indexCandyCnt + 1; 
				}				
			}else if(index-1 >= 0 && index+1 < N) {
				if(ratings[index-1] < ratings[index] && ratings[index+1] < ratings[index]) {
					rcandyCnt = dfs(index + 1, candy, ratings, N, visiting);
					lcandyCnt = dfs(index - 1, candy, ratings, N, visiting);
					if(rcandyCnt != Integer.MIN_VALUE && lcandyCnt != Integer.MIN_VALUE) {
						indexCandyCnt = Math.max(rcandyCnt, lcandyCnt) + 1;
					}					
				} else if(ratings[index-1] < ratings[index] && ratings[index+1] >= ratings[index]) {
					lcandyCnt = dfs(index - 1, candy, ratings, N, visiting);
					if(lcandyCnt != Integer.MIN_VALUE) {
						indexCandyCnt = lcandyCnt + 1;
					}	
				} else if(ratings[index+1] < ratings[index] && ratings[index-1] >= ratings[index]) {
					rcandyCnt = dfs(index + 1, candy, ratings, N, visiting);
					if(rcandyCnt != Integer.MIN_VALUE) {
						indexCandyCnt = rcandyCnt + 1;
					}			
				}
			}
		}
		if(indexCandyCnt != Integer.MIN_VALUE) {
			candy[index] = indexCandyCnt;
		}
		return indexCandyCnt;
	}
}
