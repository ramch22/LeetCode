package study.algos.leetcode.hard;

import java.util.*;
import java.util.stream.Collectors;

class BusConnEdge {
	int comp;
	int oComp;
	int v;
	boolean visited = false;

	public BusConnEdge(int comp, int oComp, int v) {
		super();
		this.comp = comp;
		this.oComp = oComp;
		this.v = v;
	}

	@Override
	public String toString() {
		return "BCEdge: [comp=" + comp + ", oComp=" + oComp + ", v=" + v + " ]";
	}
}

public class BusRoutes815 {

	HashMap<Integer, LinkedList<Integer>> v2CompMap = new HashMap<>();
	ArrayList<LinkedList<BusConnEdge>> graph = null;

	public int numBusesToDestination(int[][] routes, int S, int T) {
		int sComp = -1;
		int tComp = -1;
		int V = routes.length;
		this.graph = new ArrayList<>(V);
		for (int r = 0; r < routes.length; r++) {
			int comp = r;
			graph.add(comp, new LinkedList<>());
			for (int c = 0; c < routes[r].length; c++) {
				int v = routes[r][c];
				if (sComp == -1 && tComp == -1 && v == S && v == T)
					return 0;

				if (v == S && sComp == -1)
					sComp = comp;
				else if (v == T && tComp == -1)
					tComp = comp;

				if (v2CompMap.get(v) != null && !v2CompMap.isEmpty()) {
					LinkedList<Integer> complist = v2CompMap.get(v);
					for (Integer oComp : complist) {
						BusConnEdge e = new BusConnEdge(comp, oComp, v);
						graph.get(comp).add(e);
						graph.get(oComp).add(e);
						// System.out.println("adding edge: " + e);
					}
				}
				v2CompMap.compute(v, (key, val) -> (val == null) ? new LinkedList<>() : val).add(comp);
			}
			/*
			 * System.out.println(String.
			 * format("comp: %s; connections: %s; sourceComp: %s; targetComp: %s", comp,
			 * graph.get(comp).stream().map(e ->
			 * e.toString()).collect(Collectors.joining(";\r\n")), sComp, tComp));
			 */
		}
		Deque<int[]> q = new ArrayDeque<>();
		int[] source = new int[] { sComp, S };
		q.offer(source);
		int[][] parentTo = new int[V][2];
		parentTo[0] = new int[] { -1, -1, };
		int[] distToS = new int[V];
		Arrays.fill(distToS, Integer.MAX_VALUE);
		distToS[sComp] = 0;
		int[] target = new int[] { tComp, T };
		if (source[0] == target[0]) {
			if (source[1] == target[1])
				return 0;
			else
				return 1;
		}
		return bfs(q, source, target, parentTo, V, distToS);
	}

	int bfs(Deque<int[]> q, int[] source, int[] target, int[][] parentTo, int V, int[] distToS) {
		int bestTargetDist = Integer.MAX_VALUE;
		int[] bestTargetParent = new int[] {};

		while (!q.isEmpty()) {
			int[] compV = q.poll();
			int comp = compV[0];
			int posV = compV[1];

			LinkedList<BusConnEdge> edgesTo = graph.get(comp);
			for (BusConnEdge e : edgesTo) {
				if (!e.visited) {
					int oComp = (e.comp == comp) ? e.oComp : e.comp;
					int[] oCompV = new int[] { oComp, e.v };
					int numBuses = (posV == e.v) ? 0 : 1;
					if ((distToS[comp] + numBuses) < distToS[oComp]) {
						distToS[oComp] = distToS[comp] + numBuses;
						parentTo[oComp] = new int[] { comp, posV };
					}
					e.visited = true;
					/*
					 * System.out.println(String.format(
					 * "compV: %s; oCompV: %s; parentTo: %s; distToS: %s; e: %s target: %s; source: %s"
					 * , Arrays.toString(compV), Arrays.toString(oCompV),
					 * Arrays.toString(parentTo[oComp]), Arrays.toString(distToS), e,
					 * Arrays.toString(target), Arrays.toString(source)));
					 */

					if (oCompV[0] == target[0]) {
						int localTargetDist = (oCompV[1] == target[1]) ? distToS[oComp] : 1 + distToS[oComp];
						System.out.println(String.format("oCompV: %s; target: %s; localTargetDist: %s; distToS: %s",
								Arrays.toString(oCompV), Arrays.toString(target), localTargetDist,
								Arrays.toString(distToS)));
						if (localTargetDist < bestTargetDist) {
							bestTargetDist = localTargetDist;
							bestTargetParent = parentTo[oComp];
							System.out.println(
									String.format("localTargetDist: %s; bestTargetDist: %s; bestTargetParent: %s",
											localTargetDist, bestTargetDist, Arrays.toString(bestTargetParent)));
						}

					}
					if (distToS[oComp] <= bestTargetDist)
						q.offer(oCompV);
				}
			}
		}
		return (bestTargetDist == Integer.MAX_VALUE) ? -1 : bestTargetDist;
	}

	public static void main(String[] args) {
		int[][] routes = new int[][] {};
		int S = -1;
		int T = -1;
		BusRoutes815 busRoutes = null;

		routes = new int[][] { { 1, 2, 7 }, { 3, 6, 7 } };
		S = 6;
		T = 1;
		busRoutes = new BusRoutes815();
		System.out.println("best strategy: " + busRoutes.numBusesToDestination(routes, S, T));
		System.out.println(
				"################################################################################################################");

		routes = new int[][] { { 7, 12 }, { 4, 5, 15 }, { 6 }, { 15, 19 }, { 9, 12, 13 } };
		S = 15;
		T = 12;
		busRoutes = new BusRoutes815();
		System.out.println("best strategy: " + busRoutes.numBusesToDestination(routes, S, T));
		System.out.println(
				"################################################################################################################");

		routes = new int[][] { { 2 }, { 2, 8 } };
		S = 8;
		T = 2;
		busRoutes = new BusRoutes815();
		System.out.println("best strategy: " + busRoutes.numBusesToDestination(routes, S, T));

		System.out.println(
				"################################################################################################################");

		routes = new int[][] { { 24 }, { 3, 6, 11, 14, 22 }, { 1, 23, 24 }, { 0, 6, 14 }, { 1, 3, 8, 11, 20 } };
		S = 8;
		T = 2;
		busRoutes = new BusRoutes815();
		System.out.println("best strategy: " + busRoutes.numBusesToDestination(routes, S, T));
		System.out.println(
				"################################################################################################################");

		routes = new int[][] { { 1, 9, 12, 20, 23, 24, 35, 38 }, { 10, 21, 24, 31, 32, 34, 37, 38, 43 },
				{ 10, 19, 28, 37 }, { 8 }, { 14, 19 }, { 11, 17, 23, 31, 41, 43, 44 }, { 21, 26, 29, 33 },
				{ 5, 11, 33, 41 }, { 4, 5, 8, 9, 24, 44 } };
		S = 37;
		T = 28;
		busRoutes = new BusRoutes815();
		System.out.println("best strategy: " + busRoutes.numBusesToDestination(routes, S, T));
		System.out.println(
				"################################################################################################################");

		routes = new int[][] { { 3, 16, 33, 45, 59, 79, 103, 135 },
				{ 3, 35, 39, 54, 56, 78, 96, 101, 120, 132, 146, 148 }, { 13, 72, 98 }, { 37, 70, 107 },
				{ 0, 12, 31, 37, 41, 68, 78, 94, 100, 101, 113, 123 }, { 11, 32, 52, 85, 135 }, { 43, 50, 128 },
				{ 0, 13, 49, 51, 53, 55, 60, 65, 66, 80, 82, 87, 92, 99, 112, 118, 120, 125, 128, 131, 137 },
				{ 15, 19, 34, 37, 45, 52, 56, 97, 108, 123, 142 },
				{ 7, 9, 20, 28, 29, 33, 34, 38, 43, 46, 47, 48, 53, 59, 65, 72, 74, 80, 88, 92, 110, 111, 113, 119, 135,
						140 },
				{ 15, 41, 64, 83 }, { 7, 13, 26, 31, 57, 85, 101, 108, 110, 115, 119, 124, 149 },
				{ 47, 61, 67, 70, 74, 75, 77, 84, 92, 101, 124, 132, 133, 142, 147 },
				{ 0, 2, 5, 6, 12, 18, 34, 37, 47, 58, 77, 98, 99, 109, 112, 131, 135, 149 },
				{ 6, 7, 8, 9, 14, 17, 21, 25, 33, 40, 45, 50, 56, 57, 58, 60, 68, 92, 93, 100, 108, 114, 130, 149 },
				{ 7 }, { 5, 16, 22, 48, 77, 82, 108, 114, 124 }, { 34, 71 }, { 8, 16, 32, 48, 104, 108, 116, 134, 145 },
				{ 3, 10, 16, 19, 35, 45, 64, 74, 89, 101, 116, 149 },
				{ 1, 5, 7, 10, 11, 18, 40, 45, 50, 51, 52, 54, 55, 69, 71, 81, 82, 83, 85, 89, 96, 100, 114, 115, 124,
						134, 138, 148 },
				{ 0, 2, 3, 5, 6, 9, 15, 52, 64, 103, 108, 114, 146 },
				{ 5, 33, 39, 40, 44, 45, 66, 67, 68, 69, 84, 102, 106, 115, 120, 128, 133 },
				{ 17, 26, 49, 50, 55, 58, 60, 65, 88, 90, 102, 121, 126, 130, 137, 139, 144 },
				{ 6, 12, 13, 37, 41, 42, 48, 50, 51, 55, 64, 65, 68, 70, 73, 102, 106, 108, 120, 123, 126, 127, 129,
						135, 136, 149 },
				{ 6, 7, 12, 33, 37, 41, 47, 53, 54, 80, 107, 121, 126 },
				{ 15, 75, 91, 103, 107, 110, 125, 139, 142, 149 },
				{ 18, 24, 30, 52, 61, 64, 75, 79, 85, 95, 100, 103, 105, 111, 128, 129, 142 },
				{ 3, 14, 18, 32, 45, 52, 57, 63, 68, 78, 85, 91, 100, 104, 111, 114, 142 },
				{ 4, 7, 11, 20, 21, 31, 32, 33, 48, 61, 62, 65, 66, 73, 80, 92, 93, 97, 99, 108, 112, 116, 136, 139 } };
		S = 37;
		T = 28;
		busRoutes = new BusRoutes815();
		System.out.println("best strategy: " + busRoutes.numBusesToDestination(routes, S, T));
		System.out.println(
				"################################################################################################################");

		routes = new int[][] { { 3, 16, 33, 45, 59, 79, 103, 135 },
				{ 3, 35, 39, 54, 56, 78, 96, 101, 120, 132, 146, 148 }, { 13, 72, 98 }, { 37, 70, 107 },
				
				{ 0, 12, 31, 37, 41, 68, 78, 94, 100, 101, 113, 123 }, 
				
				{ 11, 32, 52, 85, 135 }, { 43, 50, 128 },
				

				{ 7, 13, 26, 31, 57, 85, 101, 108, 110, 115, 119, 124, 149 },
				{ 0, 13, 49, 51, 53, 55, 60, 65, 66, 80, 82, 87, 92, 99, 112, 118, 120, 125, 128, 131, 137 },
				
				
				{ 15, 19, 34, 37, 45, 52, 56, 97, 108, 123, 142 },
				{ 7, 9, 20, 28, 29, 33, 34, 38, 43, 46, 47, 48, 53, 59, 65, 72, 74, 80, 88, 92, 110, 111, 113, 119, 135,
						140 },
				{ 15, 41, 64, 83 }, 
				
				
				{ 7, 13, 26, 31, 57, 85, 101, 108, 110, 115, 119, 124, 149 },
				
				
				
				
				{ 47, 61, 67, 70, 74, 75, 77, 84, 92, 101, 124, 132, 133, 142, 147 },
				{ 0, 2, 5, 6, 12, 18, 34, 37, 47, 58, 77, 98, 99, 109, 112, 131, 135, 149 },
				{ 6, 7, 8, 9, 14, 17, 21, 25, 33, 40, 45, 50, 56, 57, 58, 60, 68, 92, 93, 100, 108, 114, 130, 149 },
				{ 7 }, { 5, 16, 22, 48, 77, 82, 108, 114, 124 }, { 34, 71 }, { 8, 16, 32, 48, 104, 108, 116, 134, 145 },
				{ 3, 10, 16, 19, 35, 45, 64, 74, 89, 101, 116, 149 },
				{ 1, 5, 7, 10, 11, 18, 40, 45, 50, 51, 52, 54, 55, 69, 71, 81, 82, 83, 85, 89, 96, 100, 114, 115, 124,
						134, 138, 148 },
				{ 0, 2, 3, 5, 6, 9, 15, 52, 64, 103, 108, 114, 146 },
				{ 5, 33, 39, 40, 44, 45, 66, 67, 68, 69, 84, 102, 106, 115, 120, 128, 133 },
				{ 17, 26, 49, 50, 55, 58, 60, 65, 88, 90, 102, 121, 126, 130, 137, 139, 144 },
				{ 6, 12, 13, 37, 41, 42, 48, 50, 51, 55, 64, 65, 68, 70, 73, 102, 106, 108, 120, 123, 126, 127, 129,
						135, 136, 149 },
				{ 6, 7, 12, 33, 37, 41, 47, 53, 54, 80, 107, 121, 126 },
				{ 15, 75, 91, 103, 107, 110, 125, 139, 142, 149 },
				{ 18, 24, 30, 52, 61, 64, 75, 79, 85, 95, 100, 103, 105, 111, 128, 129, 142 },
				{ 3, 14, 18, 32, 45, 52, 57, 63, 68, 78, 85, 91, 100, 104, 111, 114, 142 },
				{ 4, 7, 11, 20, 21, 31, 32, 33, 48, 61, 62, 65, 66, 73, 80, 92, 93, 97, 99, 108, 112, 116, 136, 139 } };
		S = 85;
		T = 112;
		busRoutes = new BusRoutes815();
		System.out.println("best strategy: " + busRoutes.numBusesToDestination(routes, S, T));
		System.out.println(
				"################################################################################################################");

	}

}
